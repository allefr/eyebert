// Code generated by MockGen. DO NOT EDIT.
// Source: ../eyebert.go

// Package mockeyebert is a generated GoMock package.
package mockeyebert

import (
	reflect "reflect"

	eyebert "github.com/allefr/eyebert/goeyebert/eyebert"
	gomock "github.com/golang/mock/gomock"
)

// MockSerial is a mock of Serial interface.
type MockSerial struct {
	ctrl     *gomock.Controller
	recorder *MockSerialMockRecorder
}

// MockSerialMockRecorder is the mock recorder for MockSerial.
type MockSerialMockRecorder struct {
	mock *MockSerial
}

// NewMockSerial creates a new mock instance.
func NewMockSerial(ctrl *gomock.Controller) *MockSerial {
	mock := &MockSerial{ctrl: ctrl}
	mock.recorder = &MockSerialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerial) EXPECT() *MockSerialMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSerial) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSerialMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSerial)(nil).Close))
}

// Flush mocks base method.
func (m *MockSerial) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockSerialMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockSerial)(nil).Flush))
}

// Read mocks base method.
func (m *MockSerial) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSerialMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSerial)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockSerial) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSerialMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSerial)(nil).Write), arg0)
}

// MockBERTDriver is a mock of BERTDriver interface.
type MockBERTDriver struct {
	ctrl     *gomock.Controller
	recorder *MockBERTDriverMockRecorder
}

// MockBERTDriverMockRecorder is the mock recorder for MockBERTDriver.
type MockBERTDriverMockRecorder struct {
	mock *MockBERTDriver
}

// NewMockBERTDriver creates a new mock instance.
func NewMockBERTDriver(ctrl *gomock.Controller) *MockBERTDriver {
	mock := &MockBERTDriver{ctrl: ctrl}
	mock.recorder = &MockBERTDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBERTDriver) EXPECT() *MockBERTDriverMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBERTDriver) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBERTDriverMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBERTDriver)(nil).Close))
}

// GetSFPinfo mocks base method.
func (m *MockBERTDriver) GetSFPinfo() (eyebert.SFPData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSFPinfo")
	ret0, _ := ret[0].(eyebert.SFPData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSFPinfo indicates an expected call of GetSFPinfo.
func (mr *MockBERTDriverMockRecorder) GetSFPinfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSFPinfo", reflect.TypeOf((*MockBERTDriver)(nil).GetSFPinfo))
}

// GetStats mocks base method.
func (m *MockBERTDriver) GetStats() (eyebert.BERStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(eyebert.BERStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockBERTDriverMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockBERTDriver)(nil).GetStats))
}

// GetTesterInfo mocks base method.
func (m *MockBERTDriver) GetTesterInfo() (eyebert.BERTester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTesterInfo")
	ret0, _ := ret[0].(eyebert.BERTester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTesterInfo indicates an expected call of GetTesterInfo.
func (mr *MockBERTDriverMockRecorder) GetTesterInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTesterInfo", reflect.TypeOf((*MockBERTDriver)(nil).GetTesterInfo))
}

// ResetStats mocks base method.
func (m *MockBERTDriver) ResetStats() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetStats")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetStats indicates an expected call of ResetStats.
func (mr *MockBERTDriverMockRecorder) ResetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStats", reflect.TypeOf((*MockBERTDriver)(nil).ResetStats))
}

// SetDataRate mocks base method.
func (m *MockBERTDriver) SetDataRate(arg0 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDataRate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDataRate indicates an expected call of SetDataRate.
func (mr *MockBERTDriverMockRecorder) SetDataRate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataRate", reflect.TypeOf((*MockBERTDriver)(nil).SetDataRate), arg0)
}

// SetPattern mocks base method.
func (m *MockBERTDriver) SetPattern(arg0 eyebert.Pattern) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPattern", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPattern indicates an expected call of SetPattern.
func (mr *MockBERTDriverMockRecorder) SetPattern(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPattern", reflect.TypeOf((*MockBERTDriver)(nil).SetPattern), arg0)
}

// SetSFPtxEnable mocks base method.
func (m *MockBERTDriver) SetSFPtxEnable(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSFPtxEnable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSFPtxEnable indicates an expected call of SetSFPtxEnable.
func (mr *MockBERTDriverMockRecorder) SetSFPtxEnable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSFPtxEnable", reflect.TypeOf((*MockBERTDriver)(nil).SetSFPtxEnable), arg0)
}

// SetWaveLength mocks base method.
func (m *MockBERTDriver) SetWaveLength(arg0 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWaveLength", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWaveLength indicates an expected call of SetWaveLength.
func (mr *MockBERTDriverMockRecorder) SetWaveLength(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWaveLength", reflect.TypeOf((*MockBERTDriver)(nil).SetWaveLength), arg0)
}

// StartTest mocks base method.
func (m *MockBERTDriver) StartTest() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTest")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTest indicates an expected call of StartTest.
func (mr *MockBERTDriverMockRecorder) StartTest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTest", reflect.TypeOf((*MockBERTDriver)(nil).StartTest))
}

// StopTest mocks base method.
func (m *MockBERTDriver) StopTest() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTest")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTest indicates an expected call of StopTest.
func (mr *MockBERTDriverMockRecorder) StopTest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTest", reflect.TypeOf((*MockBERTDriver)(nil).StopTest))
}
